% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/biproportional.R
\name{pukelsheim}
\alias{pukelsheim}
\title{Biproportional apportionment with data frames}
\usage{
pukelsheim(
  votes_df,
  district_seats_df,
  quorum,
  new_seats_col = "seats",
  use_list_votes = TRUE
)
}
\arguments{
\item{votes_df}{data.frame (long format) with 3 columns (actual colnames can differ):
\itemize{
\item party id/name
\item district id/name
\item votes
}}

\item{district_seats_df}{data.frame with 2 columns (actual colnames can differ):
\itemize{
\item district id/name
\item number of seats for a district
}}

\item{quorum}{Optional list of functions which take the votes_matrix and
return a logical vector that denotes for each list/party
whether they reached the quorum (i.e. are eligible for seats).
The easiest way to do this is via \code{\link[=quorum_any]{quorum_any()}} or
\code{\link[=quorum_all]{quorum_all()}}, see examples. Alternatively you can pass a
precalculated logical vector. No quorum is applied if parameter
is missing or NULL.}

\item{new_seats_col}{name of the new column}

\item{use_list_votes}{By default (\code{TRUE}) it's assumed that each voter in a
district has as many votes as there are seats in a
district. Set to \code{FALSE} if \code{votes_df} shows the number
of voters.}
}
\value{
A data.frame (like votes_df) with a new column denoting the number
seats per party and district
}
\description{
Method to proportionally allocate seats among parties/lists and
districts/regions/entities ("Doppelter Pukelsheim").
}
\details{
Each party nominates a candidate list for every district. The voters vote
for the parties of their district. The seat allocation is calculated in two
steps:

\enumerate{
\item In the so called \emph{upper apportionment} the number of seats for
each party (over all districts) is determined.
\item In the so called \emph{lower apportionment} the seats are distributed
to the regional party list respecting the results from the upper apportionment.
}

Parties failing to reach quorums cannot get seats.

If you want to other apportion methods than Sainte-LaguÃ« use \link{biproporz}.
}
\examples{
# Zug 2018
votes_df = unique(zug2018[c("list_id", "entity_id", "list_votes")])
district_seats_df = unique(zug2018[c("entity_id", "election_mandates")])

seats_df = pukelsheim(votes_df,
                      district_seats_df,
                      quorum_any(any_district = 0.05, total = 0.03))

head(seats_df)

# Finland 2019
finland19_result = pukelsheim(finland2019$votes_df,
                             finland2019$district_seats_df,
                             new_seats_col = "mandates",
                             use_list_votes = FALSE)
tail(finland19_result[order(finland19_result$mandates),])

}
\seealso{
\code{\link[=biproporz]{biproporz()}}, \code{\link[=get_divisors]{get_divisors()}}
}
